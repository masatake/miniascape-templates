{% include "snippets/pre.dynamic_network.rhel-7.functions" %}
# {# vim:sw=4:ts=4:et:ft=sh:
#  #}
# Installer boot options are drastically changed since RHEL 7.
# See RHEL 7 Installation Guide, Network Boot Options: http://red.ht/1DGvZvH
# and dracut.cmdline(7) for more details.
# 
# Static IP configuration examples:
# 
#     - ip=ip::gateway:netmask:hostname:interface:none
#     - nameserver=...
#     - ifname=eth0:01:23:45:67:89:ab
#     - net.ifnames=0 (kernel boot option to switch to legacy iface naming mode)
#     - bond=bond0:em1,em2[:mode=active-backup,tx_queues=32,downdelay=5000]
# 
#     - ip=192.168.122.101::192.168.122.1:255.255.255.0:rhel-7-srv-1.example.com:bond0:none
#       ip=192.168.1.11::192.168.1.254:255.255.0.0::bond1:none
#       bond=bond0:em1,em2:mode=active-backup,downdelay=5000
#       bond=bond1:em3,em4
#       bootdev=bond0
#
# TODO:
#   - process netmask in bits
#   - team device support
#   - team device support
#
boot_params=${1:-/tmp/boot-params}
workdir=${2:-/tmp}
network_ks=${3:-${workdir}/network-ks.cfg}

test -f ${boot_params} && source ${boot_params} || :

iface_rest_config () {
    local iface=$1
    local network_opts=""

    if test "x${iface:0:4}" = "xbond"; then
        for f in ${workdir}/bond*; do
            if grep -q "bond=${iface}" $f 2>/dev/null; then
                source $f  # Load bond device vars: bond, slaves, bond_opts.
                network_opts=" --bondslaves=${slaves:?}$(test -z ${bond_opts} || echo \ --bondopts=${bond_opts:?})"
                break
            fi
        done
    fi
    echo "${network_opts}"
}

if test ! -z "${ip}"; then  # It may be defined in ${boot_params} file.
    bootdev=$(find_bootdev $(cat ${boot_params}))
    bondidx=0
    for bond_spec in $(sed -nr 's/^bond="?([^"]+)"?$/\1/p' ${boot_params}); do
        echo "[Info] Found a bonding device: ${bond_spec}"
        parse_bond_spec "${bond_spec}" | tee ${workdir}/bond-${bondidx}
        bondidx=$(( ${bondidx} + 1 ))
    done

    rm -f ${network_ks}  # Create it newly always.
    touch ${network_ks}  # Create it newly always.

    ifaceidx=0
    for ip in $(sed -nr 's/^ip="?([^"]+)"?$/\1/p' ${boot_params}); do
        echo "[Debug] ip=${ip}"

        # 1. Try the pattern of automatic configuration for all interfaces:
        bootproto=$(parse_ip_spec__auto_config_all_bootproto "${ip}")
        if test ! -z ${bootproto}; then
            echo "[Info] Use DHCP or iBFT for all interfaces"
            ifaces=$(list_linkup_interfaces)
            for iface in ${ifaces}; do
                echo "network --device=${iface} --bootproto=${bootproto} --onboot=yes" | tee -a ${network_ks}
            done
            test -z ${hostname} || echo "network --hostname=${hostname}" | tee -a ${network_ks}
            break
        fi

        iface_params=${workdir}/iface-${ifaceidx}
        ifaceidx=$(( ${ifaceidx} + 1 ))

        # 2. Try the pattern of automatic configuration for this specific interface:
        iface_def=$(parse_ip_spec__auto_config "${ip}")
        if test ! -z "${iface_def}"; then
            echo "[Info] Use DHCP or iBFT for this interface"
            echo "${iface_def}" | tee ${iface_params}
            source ${iface_params}  # Load vars, iface, bootproto and method.
            network_opts="--bootproto=${bootproto:?} --device=${iface:?} --onboot=yes$(iface_rest_config ${iface})"
            echo "network ${network_opts}" | tee -a ${network_ks}
            continue
        fi

        # 3. Try the pattern of static configuration.
        iface_def=$(parse_ip_spec__static_config "${ip}")
        if test -z "${iface_def}"; then
            echo "[Warn] Parse failed for the ip, maybe wrong format: ${ip}"
            continue
        fi

        echo "${iface_def}" | tee ${iface_params}
        source ${iface_params}  # Load vars, ip, netmask, etc.

        if test "x${ip}" = "x" -o "x${iface}" = "x" -o "x${netmask}" = "x"; then
            echo "[Warn] A/some parameters are not given for this interface: ${iface_def}"
            continue
        fi

        network_opts="--bootproto=static --device=${iface:?} --ip=${ip:?} --netmask=${netmask:?}"
        network_opts="${network_opts:?}$(test -z ${gateway} || echo \ --gateway=${gateway:?})"
        network_opts="${network_opts:?}$(test -z ${hostname} || echo \ --hostname=${hostname:?})"
        network_opts="${network_opts:?}$(iface_rest_config ${iface})"

        test -z ${hostname} || echo "network --hostname=${hostname}" | tee -a ${network_ks}
        echo "network ${network_opts}" | tee -a ${network_ks}
    done
fi
