# Makefile to generate private key and certificates needed for RHUI setup
# Requirements: openssl
# Author: Satoru SATOH <ssato@redhat.com>
# License: MIT
#
# TODO:
#   * support CDS additions
#   * Use /usr/share/rh-rhua/rhui_certs/create_rhui_ssl_certs.sh instead ?
#     (but it does not look support unattended certs generation...)
#
GEN_KEY	= openssl genrsa -out $@ {{ cert.key_length|default('2048') }}
DAYS	?= {{ cert.expiration_dates }}
SUBJ_BASE	?= {{ cert.subject }}
DIGEST_OPT ?= -sha256

RHUA_FQDN ?= {{ fqdn }}
{% for cds in cdsservers -%}
CDS_{{ loop.index }}_FQDN ?= {% if cds.cli_fqdn is defined %}{{ cds.cli_fqdn }}{% else %}{{ cds.fqdn }}{% endif %}
{% endfor %}
objs = rhui-ca.srl
objs += rhui-ca.crt $(RHUA_FQDN).crt entitlement-ca.crt
{% for cds in cdsservers -%}
objs += $(CDS_{{ loop.index }}_FQDN).crt
{% endfor %}
all: $(objs)

rhui-ca.srl:
	echo 10 > $@

# Generate the RHUI CA private key, certificate signing request (csr) and
# certificate at once:
rhui-ca.crt rhui-ca.key:
	openssl req -new -x509 -extensions v3_ca -days $(DAYS) -nodes -keyout rhui-ca.key -subj "$(SUBJ_BASE)RHUI CA" -out $@ $(DIGEST_OPT)

# Generate the private key for RHUA:
$(RHUA_FQDN).key:
	$(GEN_KEY)

# Generate the certificate signing request (csr) for RHUA:
$(RHUA_FQDN).csr: $(RHUA_FQDN).key
	openssl req -new -key $< -subj "$(SUBJ_BASE)$(RHUA_FQDN)" -out $@ $(DIGEST_OPT)

# Generate the certificate for RHUA:
$(RHUA_FQDN).crt: rhui-ca.crt rhui-ca.key $(RHUA_FQDN).csr
	openssl x509 -req -days $(DAYS) -CA rhui-ca.crt -CAkey rhui-ca.key -in $(RHUA_FQDN).csr -out $@ $(DIGEST_OPT)

# Generate the private key for CDS-es:
{% for cds in cdsservers -%}
$(CDS_{{ loop.index }}_FQDN).key:
	$(GEN_KEY)

# Generate the certificate signing request (csr) for CDS:
$(CDS_{{ loop.index }}_FQDN).csr: $(CDS_{{ loop.index }}_FQDN).key
	openssl req -new -key $< -subj "$(SUBJ_BASE)$(CDS_{{ loop.index }}_FQDN)" -out $@ $(DIGEST_OPT)

# Generate the certificate for CDS:
$(CDS_{{ loop.index }}_FQDN).crt: rhui-ca.crt rhui-ca.key $(CDS_{{ loop.index }}_FQDN).csr
	openssl x509 -req -days $(DAYS) -CA rhui-ca.crt -CAkey rhui-ca.key -in $(CDS_{{ loop.index }}_FQDN).csr -out $@ $(DIGEST_OPT)

{% endfor -%}
# Generate the entitlement-signing CA private key and certificate:
#
# NOTE: Remove the option '-nodes' if you want to set pass-phrase:
entitlement-ca.crt entitlement-ca-key.pem:
	openssl req -new -x509 -extensions v3_ca -days $(DAYS) -nodes -keyout entitlement-ca-key.pem -subj "$(SUBJ_BASE)$(RHUA_FQDN) Entitlement CA" -out $@ $(DIGEST_OPT)

#clean:
#	-rm -f $(wildcard *.crt) $(wildcard *.key) $(wildcard *.csr) $(wildcard *.srl)
#
#.PHONY: clean distclean
